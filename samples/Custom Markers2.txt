// ***********************************************************
//	Hypnodyne ZMax script file
//
//	- Demonstrates writing to a Marker file (.MRK) which can be loaded from HDScorer 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Global variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var recording_audio = false; 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions directly called by HDRecorder. These must exist and cannot throw errors.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// ***********************************************************
// button1
// ----------------------------------------------------------
// called when ZMax button 1 state changes
// buttondown is true if the button is pressed, false otherwise
// ************************************************************
function button1(buttondown)
{
	if (buttondown)
	{
		ZMax_Toast("Button 1 pressed", "#0099ff"); 
	}
}
// ***********************************************************
// button2
// ----------------------------------------------------------
// called when ZMax button 2 state changes
// buttondown is true if the button is pressed, false otherwise
// ***********************************************************
function button2(buttondown)
{
	if (buttondown)
	{
		 ZMax_Toast("Button 2 pressed", "#0099ff"); 
	}
}
// ***********************************************************
// button3
// ----------------------------------------------------------
// called when ZMax button 3 state changes
// buttondown is true if the button is pressed, false otherwise
// ***********************************************************
function button3(buttondown)
{
	if (buttondown)
	{ 
		ZMax_Toast("Button 3 pressed", "#0099ff"); 
	}
}
// ***********************************************************
// secondTimer
// ----------------------------------------------------------
// called every second
// ***********************************************************
function secondTimer(bodytemp, lightlevel, batteryvoltage, BPM, dx, dy, dz, nasal_range_l, nasal_range_r)
{
   
}
// ***********************************************************
// NewEpochReceived
// ----------------------------------------------------------
// called every epoch (30 seconds)
// ***********************************************************
function NewEpochReceived(nEpoch, dxyz, isREM)
{
	if (isREM == true) //enable_rem_detection must be true
	{
		ZMax_Toast("Epoch " + nEpoch + " is REM!", "#009900"); 
	} 
	if (nEpoch == 1) //First epoch: initialize.
	{		
		//create ZMax marker file header
		ZMax_CreateTextFile("mymarkers.mrk");
		ZMax_AppendTextToFile("mymarkers.mrk", "ZMAX MARKER FILE");
		ZMax_AppendTextToFile("mymarkers.mrk", "[Color = #808000]");
		ZMax_AppendTextToFile("mymarkers.mrk", "[Name = Custom markers]");		
	}
	if (nEpoch % 25 == 0) //make a default color marker every 25 epochs
	{
		ZMax_AppendTextToFile("mymarkers.mrk", nEpoch + ", , Custom marker"); //absence of color signifies pick color from header
	} 
	else if (nEpoch % 10 == 0) //make a yellow marker every 10 epochs
	{
		ZMax_AppendTextToFile("mymarkers.mrk", nEpoch + ", #FFFF00, Custom highlighted marker"); //presence of color overrides header color
	}		
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions not directly called by HDRecorder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function getFormattedDate() { //creates a date string that can be used as file name
    var date = new Date();
    var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +  date.getHours() + "-" + date.getMinutes() + "-" + date.getSeconds();
    return str;